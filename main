import pandas as pd
import plotly.express as px
from dash import Dash, dcc, html, Input, Output

# Load the emissions dataset. Adjust the path if needed.
df = pd.read_csv('owid-co2-data.csv')

# Filter out records before 1973 to ignore earlier years.
df = df[df['year'] >= 1973]

# Verify that the required columns are present.
if 'year' not in df.columns or 'country' not in df.columns:
    raise ValueError("The dataset must contain 'year' and 'country' columns.")

# Determine the year range.
min_year = int(df['year'].min())
max_year = int(df['year'].max())

# Sorted list of unique countries.
countries = sorted(df['country'].dropna().unique())

# Emission columns: those containing "co2" but not "per_capita".
emission_columns = [
    col for col in df.columns
    if 'co2' in col.lower() and 'per_capita' not in col.lower()
]
if not emission_columns:
    raise ValueError("No emission columns found. Please check your dataset column names.")

# Dropdown options
country_options = [{'label': country, 'value': country} for country in countries]
emission_options = [{'label': "All Emissions", 'value': 'ALL'}] + [
    {'label': col, 'value': col} for col in emission_columns
]
scatter_options = [{'label': col, 'value': col} for col in emission_columns]

# Year‐slider marks every 5 years, plus endpoints.
marks = {year: str(year) for year in range(min_year, max_year + 1, 5)}
marks.update({min_year: str(min_year), max_year: str(max_year)})

app = Dash(__name__)
server = app.server

app.layout = html.Div([
    # --- Line‐chart controls ---
    html.Div([
        html.Div([
            html.Label("Select Countries (line):"),
            dcc.Dropdown(
                id='country-dropdown',
                options=[{'label': "All Countries", 'value': 'ALL'}] + country_options,
                value=['ALL'],
                multi=True
            ),
        ], style={'width': '45%', 'display': 'inline-block', 'padding': '10px'}),
        html.Div([
            html.Label("Select Emissions (line):"),
            dcc.Dropdown(
                id='emission-dropdown',
                options=emission_options,
                value=['ALL'],
                multi=True
            ),
        ], style={'width': '45%', 'display': 'inline-block', 'float': 'right', 'padding': '10px'}),
    ], style={'width': '80%', 'margin': 'auto'}),

    dcc.Graph(id='emission-graph', style={'height': '800px'}),

    # --- Scatter‐plot controls ---
    html.Div([
        html.Div([
            html.Label("(Optional) Pick specific scatter‐countries:"),
            dcc.Dropdown(
                id='scatter-country-dropdown',
                options=country_options,
                value=[],          # empty → fallback to line‐chart countries
                multi=True,
                placeholder="(leave blank to use line‐chart countries)"
            ),
        ], style={'width': '30%', 'display': 'inline-block', 'padding': '10px'}),
        html.Div([
            html.Label("Scatter X axis:"),
            dcc.Dropdown(
                id='scatter-x-dropdown',
                options=scatter_options,
                value=emission_columns[0],
                clearable=False
            ),
        ], style={'width': '30%', 'display': 'inline-block', 'padding': '10px'}),
        html.Div([
            html.Label("Scatter Y axis:"),
            dcc.Dropdown(
                id='scatter-y-dropdown',
                options=scatter_options,
                value=emission_columns[1] if len(emission_columns) > 1 else emission_columns[0],
                clearable=False
            ),
        ], style={'width': '30%', 'display': 'inline-block', 'padding': '10px'}),
    ], style={'width': '80%', 'margin': 'auto'}),

    dcc.Graph(id='scatter-plot', style={'height': '600px'}),

    # --- Year‐slider ---
    html.Div([
        html.Label("Select Year Range:"),
        dcc.RangeSlider(
            id='year-slider',
            min=min_year, max=max_year,
            value=[min_year, max_year],
            step=1, marks=marks,
            tooltip={"placement": "bottom", "always_visible": True}
        ),
    ], style={
        'width': 'calc(100% - 60px)',
        'padding': '20px', 'margin-left': '0', 'margin-right': '60px'
    }),

    # Stores to preserve “ALL” logic for the line‐chart controls only
    dcc.Store(id='country-store', data=['ALL']),
    dcc.Store(id='emission-store', data=['ALL']),
])

@app.callback(
    [Output('emission-graph', 'figure'),
     Output('scatter-plot', 'figure')],
    [Input('year-slider', 'value'),
     Input('country-dropdown', 'value'),
     Input('emission-dropdown', 'value'),
     Input('scatter-country-dropdown', 'value'),
     Input('scatter-x-dropdown', 'value'),
     Input('scatter-y-dropdown', 'value')]
)
def update_graphs(year_range,
                  sel_line_countries, sel_line_emissions,
                  sel_scatter_countries, scatter_x, scatter_y):

    start_year, end_year = year_range

    # --- LINE CHART FILTERS ---
    if sel_line_countries == ["ALL"]:
        line_countries = countries
    else:
        line_countries = sel_line_countries

    if sel_line_emissions == ["ALL"]:
        line_emissions = emission_columns
    else:
        line_emissions = sel_line_emissions

    df_line = df[
        (df['year'] >= start_year) &
        (df['year'] <= end_year) &
        (df['country'].isin(line_countries))
    ]

    if df_line.empty:
        line_fig = {"data": [], "layout": {"title": "No data for those line‐chart options."}}
    else:
        df_melt = df_line.melt(
            id_vars=['year','country'],
            value_vars=line_emissions,
            var_name='Emission Type',
            value_name='Emission Value'
        )
        df_avg = df_melt.groupby(['year','country'], as_index=False)['Emission Value'].mean()
        line_fig = px.line(
            df_avg, x='year', y='Emission Value', color='country',
            markers=True, title=f'Average Emissions {start_year}–{end_year}'
        )
        line_fig.update_layout(
            title_x=0.5,
            margin=dict(l=20,r=20,t=40,b=20),
            legend=dict(itemclick='toggleothers'),
            xaxis=dict(dtick=1),
            height=800
        )
        line_fig.update_xaxes(range=[start_year, end_year])

    # --- SCATTER CHART FILTERS ---
    # fallback to line_countries if none explicitly chosen
    if sel_scatter_countries:
        scatter_countries = sel_scatter_countries
    else:
        scatter_countries = line_countries

    # must have two distinct emissions
    if scatter_x == scatter_y:
        scatter_fig = {
            "data": [], "layout": {
                "title": "Pick two different emissions to compare.",
                "xaxis": {"visible": False},
                "yaxis": {"visible": False},
                "height": 600
            }
        }
    else:
        df_scat = df[
            (df['year'] >= start_year) &
            (df['year'] <= end_year) &
            (df['country'].isin(scatter_countries))
        ][['year','country', scatter_x, scatter_y]].dropna()

        if df_scat.empty:
            scatter_fig = {"data": [], "layout": {"title": "No scatter data for those selections.", "height": 600}}
        else:
            scatter_fig = px.scatter(
                df_scat,
                x=scatter_x, y=scatter_y,
                color='country',
                hover_data=['year'],
                title=f'{scatter_x} vs. {scatter_y}'
            )
            scatter_fig.update_layout(margin=dict(l=20,r=20,t=40,b=20), height=600)

    return line_fig, scatter_fig

# Preserve “ALL” semantics for the line‐chart dropdowns only
@app.callback(
    [Output('country-dropdown','value'),
     Output('country-store','data')],
    [Input('country-dropdown','value'),
     Input('country-store','data')]
)
def sync_country(selected, prev):
    if not selected: selected = []
    if not prev: prev = []
    added = [x for x in selected if x not in prev]
    if "ALL" in added:
        new = ["ALL"]
    elif "ALL" in selected and any(x!="ALL" for x in added):
        new = [x for x in selected if x!="ALL"]
    else:
        new = selected
    return new, new

@app.callback(
    [Output('emission-dropdown','value'),
     Output('emission-store','data')],
    [Input('emission-dropdown','value'),
     Input('emission-store','data')]
)
def sync_emissions(selected, prev):
    if not selected: selected = []
    if not prev: prev = []
    added = [x for x in selected if x not in prev]
    if "ALL" in added:
        new = ["ALL"]
    elif "ALL" in selected and any(x!="ALL" for x in added):
        new = [x for x in selected if x!="ALL"]
    else:
        new = selected
    return new, new

if __name__ == '__main__':
    app.run(debug=True)
